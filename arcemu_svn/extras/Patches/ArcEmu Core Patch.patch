Index: AIInterface.cpp
===================================================================
--- AIInterface.cpp	(revision 1330)
+++ AIInterface.cpp	(working copy)
@@ -242,10 +242,26 @@
 							 m_Unit->GetMapMgr()->AddCombatInProgress(m_Unit->GetGUID());
 						}
 					}
+ 				}
+
+				HandleChainAggro(pUnit);
+				
+				//give 1 threat to this unit if were not on the threat list
+				if (m_aiTargets.find(pUnit->GetGUID())==m_aiTargets.end())
+				{
+					m_aiTargets.insert(TargetMap::value_type(pUnit->GetGUID(), 1));
 				}
+				
 				//Zack : Put mob into combat animation. Take out weapons and start to look serious :P
 				m_Unit->smsg_AttackStart( pUnit );
 			}break;
+		case EVENT_DAMAGEDEALT:
+			{
+				if (m_aiTargets.find(pUnit->GetGUID())==m_aiTargets.end())
+				{
+					m_aiTargets.insert(TargetMap::value_type(pUnit->GetGUID(), 1));
+				}
+			}break;
 		case EVENT_LEAVECOMBAT:
 			{
 				if( pUnit == NULL ) return;
@@ -386,7 +402,8 @@
 
 				if( static_cast< Creature* >( m_Unit )->has_combat_text )
 					objmgr.HandleMonsterSayEvent( static_cast< Creature* >( m_Unit ), MONSTER_SAY_EVENT_ON_DAMAGE_TAKEN );
-
+				
+				HandleChainAggro(pUnit);
 				CALL_SCRIPT_EVENT(m_Unit, OnDamageTaken)(pUnit, float(misc1));
 				if(!modThreatByPtr(pUnit, misc1))
 				{
@@ -1933,7 +1950,7 @@
 			continue;
 		}
 
-		if( isCombatSupport( m_Unit, pUnit ) && ( pUnit->GetAIInterface()->getAIState() == STATE_IDLE || pUnit->GetAIInterface()->getAIState() == STATE_SCRIPTIDLE ) )//Not sure
+		if( isCombatSupport( m_Unit, pUnit ) )//Not sure
 		{
 			if( m_Unit->GetDistanceSq(pUnit) < dist)
 			{
@@ -4340,3 +4357,23 @@
 #endif
 	}
 }
+
+void AIInterface::HandleChainAggro(Unit* u)
+{
+	if (!m_Unit->IsInWorld() || !m_Unit->isAlive() || m_Unit->m_chain == NULL)
+		return;
+
+	for (std::set<Unit*>::iterator itr=m_Unit->m_chain->m_units.begin(); itr!=m_Unit->m_chain->m_units.end(); ++itr)
+	{
+		if (!(*itr)->IsInWorld() || !(*itr)->isAlive() || (m_Unit->m_chain->m_chainrange != 0 && m_Unit->CalcDistance(*itr) > m_Unit->m_chain->m_chainrange))
+			continue;
+
+		if ((*itr)->GetAIInterface()->GetAITargets()->find(u->GetGUID()) == (*itr)->GetAIInterface()->GetAITargets()->end())
+		{
+			if((*itr)->GetAIInterface()->getAIState() == STATE_IDLE || (*itr)->GetAIInterface()->getAIState() == STATE_FOLLOWING)
+				(*itr)->GetAIInterface()->HandleEvent(EVENT_ENTERCOMBAT, u, 0);
+			else
+				(*itr)->GetAIInterface()->GetAITargets()->insert(TargetMap::value_type(u->GetGUID(), 1));
+		}
+	}
+}
Index: AIInterface.h
===================================================================
--- AIInterface.h	(revision 1330)
+++ AIInterface.h	(working copy)
@@ -157,6 +157,7 @@
 {
 	EVENT_ENTERCOMBAT,
 	EVENT_LEAVECOMBAT,
+	EVENT_DAMAGEDEALT,
 	EVENT_DAMAGETAKEN,
 	EVENT_FEAR,
 	EVENT_UNFEAR,
@@ -233,6 +234,8 @@
 	AIInterface();
 	virtual ~AIInterface();
 
+	void HandleChainAggro(Unit* u);
+
 	// Misc
 	void Init(Unit *un, AIType at, MovementType mt);
 	void Init(Unit *un, AIType at, MovementType mt, Unit *owner); // used for pets
Index: Object.cpp
===================================================================
--- Object.cpp	(revision 1330)
+++ Object.cpp	(working copy)
@@ -2557,7 +2557,9 @@
 		}*/	
 
 		pVictim->SetUInt32Value( UNIT_FIELD_HEALTH, health - damage );
-	}
+		if (IsCreature() && !IsPet())
+			static_cast<Unit*>(this)->GetAIInterface()->HandleEvent(EVENT_DAMAGEDEALT, pVictim, damage);
+	} 
 }
 
 void Object::SpellNonMeleeDamageLog(Unit *pVictim, uint32 spellID, uint32 damage, bool allowProc, bool static_damage, bool no_remove_auras)
@@ -3098,4 +3100,14 @@
 	return static_cast<uint32>(-1);
 }
 
-
+void Object::SetSpawnPosition(const LocationVector & v)
+{
+	SetSpawnPosition(v.x, v.y, v.z, v.o);
+}
+ 
+void Object::SetSpawnPosition(float newX, float newY, float newZ, float newOrientation)
+{
+	m_spawnLocation.x=newX;
+	m_spawnLocation.y=newY;
+	m_spawnLocation.z=newZ;
+}
Index: Object.h
===================================================================
--- Object.h	(revision 1330)
+++ Object.h	(working copy)
@@ -184,6 +184,8 @@
 	bool IsBeingTeleported() { return mSemaphoreTeleport; }
 	void SetSemaphoreTeleport(bool semphsetting) { mSemaphoreTeleport = semphsetting; }
 
+	void SetSpawnPosition(float newX, float newY, float newZ, float newOrientation);
+	void SetSpawnPosition(const LocationVector & v);
 	bool SetPosition( float newX, float newY, float newZ, float newOrientation, bool allowPorting = false );
 	bool SetPosition( const LocationVector & v, bool allowPorting = false);
 	void SetRotation( uint64 guid );
Index: Unit.cpp
===================================================================
--- Unit.cpp	(revision 1330)
+++ Unit.cpp	(working copy)
@@ -112,6 +112,7 @@
 {
 	int i;
 
+	m_chain = NULL;
 	m_attackTimer = 0;
 	m_attackTimer_1 = 0;
 	m_dualWield = false;
@@ -362,6 +363,9 @@
 {
 	//start to remove badptrs, if you delete from the heap null the ptr's damn!
 	RemoveAllAuras();
+	
+	if (m_chain)
+		m_chain->RemoveUnit(this);
 
 	if( SM_CriticalChance != NULL ) {
 		delete [] SM_CriticalChance;
@@ -7276,6 +7280,21 @@
 	return res;
 }
 
+void UnitChain::AddUnit(Unit* u)
+{
+	m_units.insert(u);
+	u->m_chain = this;
+}
+ 
+void UnitChain::RemoveUnit(Unit* u)
+{
+	m_units.erase(u);
+	u->m_chain = NULL;
+	
+	if (m_units.size() == 0 && !m_persist)
+		delete this;
+}
+
 Group *Unit::GetGroup()
 {
 	if( IsPlayer() )
Index: Unit.h
===================================================================
--- Unit.h	(revision 1330)
+++ Unit.h	(working copy)
@@ -688,6 +688,18 @@
 	void ClearMyHealers();
 };
 
+class SERVER_DECL UnitChain
+{
+public:
+	UnitChain(bool persist = false, float chainrange = 0.0f) : m_persist(persist), m_chainrange(chainrange) {}
+	
+	float m_chainrange;
+	bool m_persist;
+	std::set<Unit*> m_units;
+	void AddUnit(Unit* u);
+	void RemoveUnit(Unit* u);
+};
+
 //====================================================================
 //  Unit
 //  Base object for Players and Creatures
@@ -706,6 +718,8 @@
 	// a lua script cannot create a unit.
 	Unit(lua_State * L) { ASSERT(false); }*/
 
+	UnitChain* m_chain;
+
 	void CombatStatusHandler_UpdatePvPTimeout();
 	void CombatStatusHandler_ResetPvPTimeout();
 
